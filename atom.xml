<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>duanzi</title>
  
  <subtitle>小站</subtitle>
  <link href="http://duan413.github.io/atom.xml" rel="self"/>
  
  <link href="http://duan413.github.io/"/>
  <updated>2020-09-13T02:56:47.090Z</updated>
  <id>http://duan413.github.io/</id>
  
  <author>
    <name>duanzi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网格布局教程</title>
    <link href="http://duan413.github.io/2020/09/13/CSS%20Gird%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/"/>
    <id>http://duan413.github.io/2020/09/13/CSS%20Gird%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-13T00:59:04.000Z</published>
    <updated>2020-09-13T02:56:47.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>网格布局是最强大的CSS布局。<br>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前智能通过复杂的CSS框架，现在可以这样使用。<br><img src="https://i.loli.net/2020/09/13/DUEC5LopOY3THcn.png" alt="image.png"><br>这就是Gird的实例。  </p><p>Gird和Flex有一定相似，都可以指定一个容器多个项目位置。但是也有区别。  </p><p>Flex是轴线布局，只能指定项目针对轴线的位置，看作“一维布局”。Gird可以分成“行和列”，产生单元格，是“二维布局”。 </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>学习Grid布局之前，需要了解一些基本概念。  </p><h4 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h4><p>采用网格布局的区域，称之为“区域”。容器内采用网格定位的子元素，称之为“项目”。  </p><pre><code>&lt;div&gt;    &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;    &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;    &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;  </code></pre><p>上面最外面的“div”就是容器，里面的三个是项目。  </p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的“p”元素就不是项目。Grid 布局只对项目生效。  </p><h4 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h4><p><img src="https://i.loli.net/2020/09/13/KJHMSq7xYaGT4fR.png" alt="image.png"> </p><h4 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h4><p>“行和列”交叉区域，称之为“单元格”。  </p><p>正常情况，n行和m列产生n x m个单元格。比如，3行3列会产生9个单元格。<br>####网格线<br>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。<br><img src="https://i.loli.net/2020/09/13/VX4wfFLD7sHkaTB.png" alt="image.png">  </p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p><h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><p>display: grid指定一个容器采用网格布局。 </p><pre><code> div &#123;     display: grid; &#125; </code></pre><p>效果如下：<br>![](<a href="https://i.loli.net/2020/09/13/jSuGLTv5MbtdIoh.png">https://i.loli.net/2020/09/13/jSuGLTv5MbtdIoh.png</a>  </p><p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p><pre><code>div &#123;display: inline-grid;&#125; </code></pre><p><img src="https://i.loli.net/2020/09/13/c1S3tReJCLEsHUA.png" alt="image.png"><br>        注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</p><h4 id="grid-template-columns-属性，grid-template-rows-属性"><a href="#grid-template-columns-属性，grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性，grid-template-rows 属性"></a>grid-template-columns 属性，grid-template-rows 属性</h4><p>容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。 </p><pre><code>    .container &#123;    display: grid;    grid-template-columns: 100px 100px 100px;    grid-template-rows: 100px 100px 100px;    &#125; </code></pre><p><img src="https://i.loli.net/2020/09/13/IZivSRJQPd6TE3n.png" alt="image.png"><br>也可以使用百分比代替。 </p><p>（1）repeat（） </p><p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。  </p><pre><code>    .container &#123;       display: grid;       grid-template-columns: repeat(3, 33.33%);       grid-template-rows: repeat(3, 33.33%);    &#125; </code></pre><p>repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p>repeat()重复某种模式也是可以的。  </p><pre><code>    grid-template-columns: repeat(2, 100px 20px 80px); </code></pre><p>上面代码定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px。<br>（2）auto-fill 关键字<br>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。  </p><pre><code>.container &#123;    display: grid;    grid-template-columns: repeat(auto-fill, 100px);&#125;</code></pre><p>（3）fr 关键字<br>为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍</p><pre><code>.container &#123;display: grid;grid-template-columns: 1fr 1fr;&#125;</code></pre><p>fr可以与绝对长度的单位结合使用，这时会非常方便  </p><pre><code>.container &#123;display: grid;grid-template-columns: 150px 1fr 2fr;&#125;</code></pre><p>上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p><p>（4）minmax()  </p><p>minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><p>  grid-template-columns: 1fr 1fr minmax(100px, 1fr);<br>上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。</p><p>（5）关键字  </p><p>auto关键字表示由浏览器自己决定长度。</p><pre><code>grid-template-columns: 100px auto 100px;</code></pre><p>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。<br>（6）网格线的名字  </p><p>grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><pre><code>.container &#123;display: grid;grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];&#125;</code></pre><p>上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。</p><p>网格布局允许同一根线有多个名字，比如[fifth-line row-5]。<br>（7）布局实例  </p><p>grid-template-columns属性对于网页布局非常有用。两栏式布局只需要一行代码。</p><pre><code>.wrapper &#123;display: grid;grid-template-columns: 70% 30%;&#125;</code></pre><p>上面代码将左边栏设为70%，右边栏设为30%。</p><p>传统的十二网格布局，写起来也很容易。</p><pre><code>grid-template-columns: repeat(12, 1fr);</code></pre><h4 id="grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性"><a href="#grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性" class="headerlink" title="grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性"></a>grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h4><p>grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。</p><pre><code>.container &#123;grid-row-gap: 20px;grid-column-gap: 20px;&#125;</code></pre><p>上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。<br>grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式，语法如下。</p><pre><code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code></pre><p>因此，上面一段 CSS 代码等同于下面的代码。</p><pre><code>.container &#123;grid-gap: 20px 20px;&#125;</code></pre><p>如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。</p><pre><code>根据最新标准，上面三个属性名的grid-前缀已经删除，grid-column-gap和grid-row-gap写成column-gap和row-gap，grid-gap写成gap。 </code></pre><h4 id="grid-template-areas-属性"><a href="#grid-template-areas-属性" class="headerlink" title="grid-template-areas 属性"></a>grid-template-areas 属性</h4><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。grid-template-areas属性用于定义区域。</p><pre><code>.container &#123;display: grid;grid-template-columns: 100px 100px 100px;grid-template-rows: 100px 100px 100px;grid-template-areas: &#39;a b c&#39;                    &#39;d e f&#39;                    &#39;g h i&#39;;&#125;</code></pre><p>上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。</p><p>多个单元格合并成一个区域的写法如下。</p><pre><code>grid-template-areas: &#39;a a a&#39;                    &#39;b b b&#39;                    &#39;c c c&#39;;</code></pre><p>上面代码将9个单元格分成a、b、c三个区域。</p><p>下面是一个布局实例。</p><pre><code>grid-template-areas: &quot;header header header&quot;                    &quot;main main sidebar&quot;                    &quot;footer footer footer&quot;;</code></pre><p>上面代码中，顶部是页眉区域header，底部是页脚区域footer，中间部分则为main和sidebar。</p><p>如果某些区域不需要利用，则使用”点”（.）表示。</p><pre><code>grid-template-areas: &#39;a . c&#39;                    &#39;d . f&#39;                    &#39;g . i&#39;;</code></pre><p>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。</p><pre><code>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。</code></pre><h4 id="grid-auto-flow-属性"><a href="#grid-auto-flow-属性" class="headerlink" title="grid-auto-flow 属性"></a>grid-auto-flow 属性</h4><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。 </p><p>这个顺序由grid-auto-flow属性决定，默认值是row，即”先行后列”。也可以将它设成column，变成”先列后行”</p><pre><code>grid-auto-flow: column;</code></pre><p>grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p><p>下面的例子让1号项目和2号项目各占据两个单元格，然后在默认的grid-auto-flow: row情况下，会产生下面这样的布局。 </p><p>上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。</p><p>现在修改设置，设为row dense，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。<br><img src="https://i.loli.net/2020/09/13/SxlN39qMyv1kYfb.png" alt="image.png"></p><pre><code>grid-auto-flow: row dense;</code></pre><p>上面代码的效果如下。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032514.png"></p><h4 id="justify-items-属性，align-items-属性，place-items-属性"><a href="#justify-items-属性，align-items-属性，place-items-属性" class="headerlink" title="justify-items 属性，align-items 属性，place-items 属性"></a>justify-items 属性，align-items 属性，place-items 属性</h4><p>justify-items属性设置单元格内容的水平位置（左中右），align-items属性设置单元格内容的垂直位置（上中下）。</p><pre><code>.container &#123;justify-items: start | end | center | stretch;align-items: start | end | center | stretch;&#125;</code></pre><p>这两个属性的写法完全相同，都可以取下面这些值。</p><pre><code>start：对齐单元格的起始边缘。end：对齐单元格的结束边缘。center：单元格内部居中。stretch：拉伸，占满单元格的整个宽度（默认值）。.container &#123;justify-items: start;&#125;</code></pre><p>上面代码表示，单元格的内容左对齐，效果如下图。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032516.png"></p><pre><code>.container &#123;align-items: start;&#125;</code></pre><p>上面代码表示，单元格的内容头部对齐，效果如下图。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032517.png"><br>place-items属性是align-items属性和justify-items属性的合并简写形式。</p><pre><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></pre><p>下面是一个例子。</p><pre><code>place-items: start end;</code></pre><p>如果省略第二个值，则浏览器认为与第一个值相等。 </p><h4 id="justify-content-属性，align-content-属性，place-content-属性"><a href="#justify-content-属性，align-content-属性，place-content-属性" class="headerlink" title="justify-content 属性，align-content 属性，place-content 属性"></a>justify-content 属性，align-content 属性，place-content 属性</h4><p>justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）。</p><pre><code>.container &#123;justify-content: start | end | center | stretch | space-around | space-between | space-evenly;align-content: start | end | center | stretch | space-around | space-between | space-evenly;  &#125;</code></pre><p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以justify-content属性为例，align-content属性的图完全一样，只是将水平方向改成垂直方向。）</p><p>start - 对齐容器的起始边框。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032519.png"><br>end - 对齐容器的结束边框。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032518.png"><br>center - 容器内部居中。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032520.png"><br>stretch - 项目大小没有指定时，拉伸占据整个网格容器。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032521.png"><br>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png"><br>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png"><br>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png"></p><p>place-content属性是align-content属性和justify-content属性的合并简写形式。</p><pre><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></pre><p>下面是一个例子。</p><pre><code>place-content: space-around space-evenly;</code></pre><p>如果省略第二个值，浏览器就会假定第二个值等于第一个值。 </p><h4 id="grid-auto-columns-属性，grid-auto-rows-属性"><a href="#grid-auto-columns-属性，grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性，grid-auto-rows 属性"></a>grid-auto-columns 属性，grid-auto-rows 属性</h4><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。</p><p>grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p><p>下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。</p><pre><code>.container &#123;display: grid;grid-template-columns: 100px 100px 100px;grid-template-rows: 100px 100px 100px;grid-auto-rows: 50px; &#125;</code></pre><p>上面代码指定新增的行高统一为50px（原始的行高为100px）。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032525.png"></p><h4 id="grid-template-属性，grid-属性"><a href="#grid-template-属性，grid-属性" class="headerlink" title="grid-template 属性，grid 属性"></a>grid-template 属性，grid 属性</h4><pre><code>grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。</code></pre><p>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。</p><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><p>下面这些属性定义在项目上面。  </p><h4 id="grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性"><a href="#grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性" class="headerlink" title="grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性"></a>grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性</h4><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><pre><code>grid-column-start属性：左边框所在的垂直网格线grid-column-end属性：右边框所在的垂直网格线grid-row-start属性：上边框所在的水平网格线grid-row-end属性：下边框所在的水平网格线.item-1 &#123;grid-column-start: 2;grid-column-end: 4;&#125;</code></pre><p>上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png"><br>上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。</p><p>除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的grid-auto-flow属性决定，这个属性的默认值是row，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成column、row dense和column dense，看看其他项目的位置发生了怎样的变化。</p><p>下面的例子是指定四个边框位置的效果。</p><pre><code>.item-1 &#123;grid-column-start: 1;grid-column-end: 3;grid-row-start: 2;grid-row-end: 4;&#125;</code></pre><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png"><br>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p><pre><code>.item-1 &#123;grid-column-start: header-start;grid-column-end: header-end;&#125;</code></pre><p>上面代码中，左边框和右边框的位置，都指定为网格线的名字。</p><p>这四个属性的值还可以使用span关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p><pre><code>.item-1 &#123;grid-column-start: span 2;&#125;</code></pre><p>上面代码表示，1号项目的左边框距离右边框跨越2个网格。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png"><br>这与下面的代码效果完全一样。</p><pre><code>.item-1 &#123;grid-column-end: span 2;&#125;</code></pre><p>使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。</p><h4 id="grid-column-属性，grid-row-属性"><a href="#grid-column-属性，grid-row-属性" class="headerlink" title="grid-column 属性，grid-row 属性"></a>grid-column 属性，grid-row 属性</h4><p> grid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。</p><pre><code>.item &#123;grid-column: &lt;start-line&gt; / &lt;end-line&gt;;grid-row: &lt;start-line&gt; / &lt;end-line&gt;;&#125;</code></pre><p>下面是一个例子。</p><pre><code>.item-1 &#123;grid-column: 1 / 3;grid-row: 1 / 2;&#125;/* 等同于 */.item-1 &#123;grid-column-start: 1;grid-column-end: 3;grid-row-start: 1;grid-row-end: 2;&#125;</code></pre><p>上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。</p><p>这两个属性之中，也可以使用span关键字，表示跨越多少个网格。</p><pre><code>.item-1 &#123;background: #b03532;grid-column: 1 / 3;grid-row: 1 / 3;&#125;/* 等同于 */.item-1 &#123;background: #b03532;grid-column: 1 / span 2;grid-row: 1 / span 2;&#125;</code></pre><p>上面代码中，项目item-1占据的区域，包括第一行 + 第二行、第一列 + 第二列。<br><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032529.png"><br>斜杠以及后面的部分可以省略，默认跨越一个网格。</p><pre><code>.item-1 &#123;grid-column: 1;grid-row: 1;&#125;</code></pre><p>上面代码中，项目item-1占据左上角第一个网格。</p><h4 id="grid-area-属性"><a href="#grid-area-属性" class="headerlink" title="grid-area 属性"></a>grid-area 属性</h4><p>grid-area属性指定项目放在哪一个区域。</p><pre><code>.item-1 &#123;grid-area: e;&#125;</code></pre><p>上面代码中，1号项目位于e区域，效果如下图。<br>grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。</p><pre><code>.item &#123;grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;&#125;</code></pre><p>下面是一个例子。</p><pre><code>.item-1 &#123;grid-area: 1 / 1 / 3 / 3;&#125; </code></pre><h4 id="justify-self-属性，align-self-属性，place-self-属性"><a href="#justify-self-属性，align-self-属性，place-self-属性" class="headerlink" title="justify-self 属性，align-self 属性，place-self 属性"></a>justify-self 属性，align-self 属性，place-self 属性</h4><p>justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。</p><p>align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。</p><pre><code>.item &#123;justify-self: start | end | center | stretch;align-self: start | end | center | stretch;&#125;</code></pre><p>这两个属性都可以取下面四个值。</p><p>start：对齐单元格的起始边缘。<br>end：对齐单元格的结束边缘。<br>center：单元格内部居中。<br>stretch：拉伸，占满单元格的整个宽度（默认值）。<br>下面是justify-self: start的例子。</p><pre><code>.item-1  &#123;justify-self: start;&#125;</code></pre><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032532.png"><br>place-self属性是align-self属性和justify-self属性的合并简写形式。</p><pre><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;;</code></pre><p>下面是一个例子。</p><pre><code>place-self: center center;</code></pre><p>如果省略第二个值，place-self属性会认为这两个值相等。<br>ok,以上就是本次记录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CSS" scheme="http://duan413.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css笔记</title>
    <link href="http://duan413.github.io/2020/09/12/css%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://duan413.github.io/2020/09/12/css%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-12T13:21:47.000Z</published>
    <updated>2020-09-13T02:57:36.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="记录学习动画中的知识点"><a href="#记录学习动画中的知识点" class="headerlink" title="记录学习动画中的知识点"></a>记录学习动画中的知识点</h3><h4 id="flex布局："><a href="#flex布局：" class="headerlink" title="flex布局："></a>flex布局：</h4><p>使目标居中:  </p><pre><code>display: flex; justify-content: center;align-items: center;</code></pre><h4 id="animation布局"><a href="#animation布局" class="headerlink" title="animation布局:"></a>animation布局:</h4><p>用@keyframes定义一个函数名字:    </p><pre><code>@keyframes hd&#123;    from&#123;            background: white;     &#125;    to&#123;           background: #e74c3c;    &#125;&#125; </code></pre><p>然后用于目标: </p><pre><code> animation-name: hd; animation-duration: 2s;</code></pre><p>最后差不多这样子，别的效果可以自己另外加入:  </p><pre><code> @keyframes hd&#123;0%&#123;    background: white;&#125;50%&#123;    transform: scale(2);&#125;100%&#123;    background: #e74c3c;&#125;&#125;</code></pre><p>移动的小方快:<br>先设置一个大盒子main，在里设置一个div，</p><pre><code> @keyframes hd&#123;25%&#123;    transform: translateX(300px);&#125;50%&#123;    transform: translate(300px,300px);    &lt;!-- 移动方向距离 --&gt;&#125;100%&#123;    transform: translateY(300px);&#125;&#125;   </code></pre><p>main和div的 </p><pre><code>main&#123;width: 400px;height: 400px;background: white;&#125;  div&#123;width: 100px;height: 100px;background: yellow;animation-name: hd;border: solid 1px #ddd;animation-duration: 2s;&#125;</code></pre><h4 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h4><p>属性重叠对动画影响:</p><p>加入定义三个动画，分别是translate,animation,border. </p><p>分别有不同的影响,但是时间分别是4s,2s,1s.  </p><p>优先级从后面往前面，所以1s先border，2s的animation剩下1s，所以translate剩下2s。</p><h3 id="transform可以旋转，缩放，移动，倾斜"><a href="#transform可以旋转，缩放，移动，倾斜" class="headerlink" title="transform可以旋转，缩放，移动，倾斜"></a>transform可以旋转，缩放，移动，倾斜</h3><p>scale()可以缩放大小。  </p><p>::after是伪类元素，就是加入一些特别的小动画。  </p><p>animation-iteration-count: 控制次数.</p><p>背景可以有渐变选项。</p><p>动画也有方向选择。</p><p>section是阴影，可以用。<br>filter是阴影的虚实。<br>比如说一个小球跳起来的影子。<br><img src="https://i.loli.net/2020/09/12/k6xZPVd4EHsbuve.png" alt="image.png"><br><img src="https://i.loli.net/2020/09/12/V9A4x6ZDQtwcmTh.png" alt="image.png"><br>动画延迟的作用:因为动画的时间包含延迟时间运用填充css.<br>贝塞尔控制曲线速率: <a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a>  </p><h4 id="按钮提交效果"><a href="#按钮提交效果" class="headerlink" title="按钮提交效果:"></a>按钮提交效果:</h4><p>首先currentcolor是一个可以使用当前文本颜色的一个好东西。<br><img src="https://i.loli.net/2020/09/12/nU7uOMbrQKPfDVZ.png" alt="image.png"><br><img src="https://i.loli.net/2020/09/12/p954IehWxU6gyCd.png" alt="image.png"><br>省略号使用伪类元素。  </p><h4 id="步进动画；"><a href="#步进动画；" class="headerlink" title="步进动画；"></a>步进动画；</h4><p><img src="https://i.loli.net/2020/09/12/bxnr9kNUQKZhTlI.png" alt="image.png">  </p><h4 id="控制动画播放暂停"><a href="#控制动画播放暂停" class="headerlink" title="控制动画播放暂停:"></a>控制动画播放暂停:</h4><p><img src="https://i.loli.net/2020/09/12/FPtgk5h7AR8B2QM.png" alt="image.png">  </p><h4 id="做轮播图"><a href="#做轮播图" class="headerlink" title="做轮播图:"></a>做轮播图:</h4><p><img src="https://i.loli.net/2020/09/12/PKq98u3HhgbDJIc.png" alt="image.png"><br>可以使用overflow来隐藏.然后步进动画来一个一个动.加入下面的编号，<br><img src="https://i.loli.net/2020/09/12/u5bwG1DrJpYizfX.png" alt="image.png">  </p><h4 id="动画填充模式-四种"><a href="#动画填充模式-四种" class="headerlink" title="动画填充模式:四种"></a>动画填充模式:四种</h4><p><img src="https://i.loli.net/2020/09/12/fh5LRpiCaIBzPgn.png" alt="image.png"></p><h4 id="动画可以综合起来一起写"><a href="#动画可以综合起来一起写" class="headerlink" title="动画可以综合起来一起写:"></a>动画可以综合起来一起写:</h4><p><img src="https://i.loli.net/2020/09/12/hal13oi8mXHKtIR.png" alt="image.png"><br>ok，以上就是这次的记录.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CSS" scheme="http://duan413.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>编一个拟态页面</title>
    <link href="http://duan413.github.io/2020/09/12/%E6%8B%9F%E6%80%81%E9%A1%B5%E9%9D%A2%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%81%9A%EF%BC%89/"/>
    <id>http://duan413.github.io/2020/09/12/%E6%8B%9F%E6%80%81%E9%A1%B5%E9%9D%A2%EF%BC%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%81%9A%EF%BC%89/</id>
    <published>2020-09-12T06:05:47.000Z</published>
    <updated>2020-09-12T06:09:53.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>拟态</title>    <style>    *{    margin: 0;    padding: 0;}body{    background-color: #55734a;}#chang{    margin: 50px auto;    width: 50%;    height: 150px;}.shang{    width:1000px;    height: 100px;    line-height: 100px;    margin: 50px auto;    border-radius: 20px;    background: linear-gradient(145deg, #4d6843, #5b7b4f);    box-shadow:  50px 50px 40px #32442c,              -50px -50px 40px #78a268;}.container-h{    display: flex;    justify-content: center;}.container-h .mt-2{    margin: 10px auto;    width: 120px;    height: 120px;    border-radius: 36px;    background: #55734a;    box-shadow:  32px 32px 64px #48623f,                  -32px -32px 64px #628455;    margin-bottom: 100px;}.container-h .mt-2:hover{    border-radius: 36px;    background: #55734a;    box-shadow: inset 32px 32px 64px #48623f,                 inset -32px -32px 64px #628455;}.mt-2  .btn{    text-decoration: none;    text-align: center;    padding: 3px 27px;    line-height: 120px;    margin-right: 1rem;    border-radius: 20px;    color: #868a9a;text-shadow: 1px 1px 0 #fff;    border-radius: 36px;background: #55734a;box-shadow:  32px 32px 64px #48623f,              -32px -32px 64px #628455;}.legend{    margin: 10px auto;    width:70px;    height: 30px;    margin-bottom: 50px;    line-height: 30px;    border-radius: 68px;background: #55734a;box-shadow: inset 12px 12px 24px #31432b,             inset -12px -12px 24px #79a369;}.fieldset{    margin: 10px auto;    width: 80%;    height: 80%;    border-radius: 68px;    background: linear-gradient(145deg, #5b7b4f, #4d6843);    box-shadow:  32px 32px 63px #31432b,              -32px -32px 63px #79a369;}.input {    width:1000px;    height: 50px;    line-height: 100px;    margin: 50px auto;    border-radius: 20px;    background: #55734a;    box-shadow: inset 5px 5px 10px #3f5537,                 inset -5px -5px 10px #6b915d;}.select{    width:200px;    height: 50px;    border-radius: 20px;    background: #55734a;    box-shadow: inset 5px 5px 10px #3f5537,                 inset -5px -5px 10px #6b915d;}.textarea{    width:1000px;    height: 100px;    margin: 50px auto;    border-radius: 20px;    background: #55734a;    box-shadow: inset 5px 5px 10px #3f5537,                 inset -5px -5px 10px #6b915d;}.range{    width:200px;    height: 50px;    border-radius: 20px;    background: #55734a;    box-shadow: inset 5px 5px 10px #3f5537,                 inset -5px -5px 10px #6b915d;}.radio-label{    width:200px;    height: 50px;    border-radius: 68px;background: linear-gradient(145deg, #5b7b4f, #4d6843);box-shadow:  5px 5px 10px #31432b,              -5px -5px 10px #79a369;}.checkbox-label{    width:200px;    height: 50px;    border-radius: 68px;background: linear-gradient(145deg, #5b7b4f, #4d6843);box-shadow:  5px 5px 10px #31432b,              -5px -5px 10px #79a369;}.radio{    border-radius: 50%;background: #55734a;box-shadow:  9px 9px 18px #31432b,              -9px -9px 18px #79a369;}.checkbox{    border-radius: 50%;    background: #55734a;    box-shadow:  9px 9px 18px #31432b,                  -9px -9px 18px #79a369;}.range{    background: #55734a;    box-shadow:  9px 9px 18px #31432b,                  -9px -9px 18px #79a369;}    </style></head><body>    <div class="container">        <!-- duanzi -->        <div class="shang">            <h1 class="h1" style="text-align: center;color: #868a9a;text-shadow: 1px 1px 0 #fff;">DUAN ZI</h1>        </div>        <!-- 链接 -->        <div class="container-h " id="chang">            <div class=" mt-2">                <a class="btn" href="https://duan413.github.io">Website</a>            </div>            <div class=" mt-2">                <a class="btn" href="https://github.com/duan413">Github</a>            </div>            <div class=" mt-2">                <a class="btn" href="https://account.bilibili.com/account/home">Blibli</a>            </div>        </div>        <!-- 列表 -->        <div class="legend">            <h4 style="text-align: center;color: #54565e;text-shadow: 1px 1px 0 #fff;">表单</h4>        </div>        <form>            <fieldset class="fieldset">                <div>                    <input class="input border" type="text" placeholder="明文" style="margin-bottom: 1rem;">                    <input type="password" class="input border" placeholder="密文" style="margin-bottom: 1rem;">                </div>                <div style="margin-bottom: 1rem;">                    <select class="select">                        <option>Option 01</option>                        <option>Option 02</option>                    </select>                </div>                <div style="margin-bottom: 1rem;">                    <textarea class="textarea border-sm" rows="5" placeholder="Textarea"></textarea>                </div>                <div style="margin-bottom: 1rem;">                    <label class="radio-label"><input class="radio" type="radio" name="radio" checked> checked</label>                    <label class="radio-label"><input class="radio" type="radio" name="radio"> unchecked</label>                    <label class="radio-label"><input class="radio" type="radio" name="radio" disabled> disabled</label>                </div>                <div style="margin-bottom: 1rem;">                    <label class="checkbox-label"><input class="checkbox" type="checkbox" checked> checked</label>                    <label class="checkbox-label"><input class="checkbox" type="checkbox"> unchecked</label>                    <label class="checkbox-label"><input class="checkbox" type="checkbox" disabled> disabled</label>                </div>                <div style="margin-bottom: 1rem;">                    <input class="range" type="range" value="2" min="0" max="10" step="0.1">                </div>            </fieldset>        </form>        <!-- 菜单 -->    </div></body></html>]]></content>
    
    
    <summary type="html">开学的第一次日记</summary>
    
    
    
    
    <category term="HTML" scheme="http://duan413.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://duan413.github.io/2020/09/10/hello-world/"/>
    <id>http://duan413.github.io/2020/09/10/hello-world/</id>
    <published>2020-09-10T03:47:19.009Z</published>
    <updated>2020-09-15T04:53:23.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
